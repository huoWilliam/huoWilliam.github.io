<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>阿飞学Linux——（1）初识Linux</title>
    <url>/2020/06/27/%E9%98%BF%E9%A3%9E%E5%AD%A6Linux%E2%80%94%E2%80%94%EF%BC%881%EF%BC%89%E5%88%9D%E8%AF%86Linux/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>阿飞学Linux——（0）计算机概论</title>
    <url>/2020/06/25/%E9%98%BF%E9%A3%9E%E5%AD%A6Linux%E2%80%94%E2%80%94%EF%BC%880%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="什么是电脑"><a href="#什么是电脑" class="headerlink" title="什么是电脑"></a>什么是电脑</h1><p>电脑是指接受用户输入指令与数据，经由cpu等数学与逻辑单元运算处理后，以产生或储存成有用的信息。</p>
<h2 id="计算机硬件的五大单元"><a href="#计算机硬件的五大单元" class="headerlink" title="计算机硬件的五大单元"></a>计算机硬件的五大单元</h2><p>计算机是由五个单元组成的，包括<strong>输入单元，输出单元，cpu内部的控制单元，算数逻辑单元与内存</strong>五个部分。</p>
<p>cpu内部的控制单元负责协调周边元件与各单元间的工作，而算术逻辑单元负责程序运算与逻辑判断。</p>
<p>故计算机的工作流程是，用户利用输入单元输入数据，之后数据流入内存，cpu从内存读取数据进行运算后，将结果写回内存后送给输出单元显示。</p>
<a id="more"></a>

<p><img src="http://linux.vbird.org/linux_basic/0105computers/computer02.gif" alt="电脑的五大单元"></p>
<h2 id="CPU的架构"><a href="#CPU的架构" class="headerlink" title="CPU的架构"></a>CPU的架构</h2><p>cpu的架构分为两种，分别是精简指令集（RISC）与复杂指令集（CISC）。</p>
<p>精简指令集较为精简，每个指令的执行时间较短，完成的动作单纯，执行性能较佳；而复杂指令集包含较多的指令，指令的执行较复杂，花费时间较长。</p>
<h2 id="电脑上常用的计算单位"><a href="#电脑上常用的计算单位" class="headerlink" title="电脑上常用的计算单位"></a>电脑上常用的计算单位</h2><ol>
<li><p>容量单位</p>
<p>电脑在存取数据时是以Byte为单位的，而1 Byte = 8 bits。</p>
<p>常见的单位转换如下</p>
<table>
<thead>
<tr>
<th>进位制</th>
<th>Kilo</th>
<th>Mega</th>
<th>Giga</th>
<th>Tera</th>
</tr>
</thead>
<tbody><tr>
<td>二进制</td>
<td>1024B</td>
<td>1024K</td>
<td>1024M</td>
<td>1024G</td>
</tr>
</tbody></table>
</li>
<li><p>速度单位</p>
<p>CPU的运算速度常使用MHz或GHz之类的单位。而网络传输方面，常使用的单位为Mbps即Mbits per second。</p>
</li>
</ol>
<h1 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h1><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p>不同的CPU型号具有不同的脚位，因此能够搭配的主板芯片组也不同。</p>
<p>CPU内部含有微指令集，不同的微指令集使CPU具有不同的工作效率。除此之外，CPU性能的比较还与CPU的频率有很大的关系。</p>
<ul>
<li><p>CPU的工作频率：外频与倍频</p>
<p>早期的CPU架构通过北桥来链接系统最重要的CPU，内存与显卡设备。由于所有的设备都通过北桥来链接，故每个设备的工作频率要相同。但是CPU的运算速度远高于其他设备，故为了迎合其他设备的速度，需要在CPU内部进行再加速，于是就有了外频与倍频。外频*倍频，所得到的就是CPU的真实频率速度。不过，由于速度被北桥所卡死了，故目前已经取消了北桥，取而代之的是，将内存控制器整合到CPU内部，使得CPU可以直接与内存等设备分别进行沟通。</p>
<p><em>倍频是固定好的，故进行超频时，修改的是外频。</em></p>
</li>
<li><p>32位与64位的CPU</p>
<p>CPU每次能够从内存中读取数据进行处理的数据量称为字组大小，字组大小依据CPU的设计有32位和64位。</p>
</li>
</ul>
<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>CPU所使用的数据都是来自于内存。个人电脑的内存主要为动态随机存取内存DRAM，是一种挥发性内存。DRAM又可以分为SDRAM和DDR SDRAM两种。DDR是所谓的双倍数据传送速度，它可以在一次工作周期中进行两次数据传送。</p>
<ul>
<li><p>多通道设计</p>
<p>传统的总线宽度一般为64位，为了加大该宽度，因此芯片组厂商将两个内存汇整在一起，如果一支内存是64位，则两支内存可以达到128位，这就是双通道设计。</p>
</li>
<li><p>DRAM与SRAM</p>
<p>由于CPU与内存之间的通信还得要经过内存控制器，故如果将部分数据放在CPU中的话，可以提高性能。由此引入了高速缓存，但是DRAM无法达到所要求的频率速度，故需要使用SRAM（静态随机存取内存）。</p>
<p><img src="http://linux.vbird.org/linux_basic/0105computers/computer07.gif" alt="高速缓存作用"></p>
</li>
<li><p>ROM</p>
<p>ROM也叫只读存储器，是一种非挥发性的内存。很多的固件，通常就是写入ROM中</p>
</li>
</ul>
<h2 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h2><p>显卡对于图像影像的显示扮演了关键的角色。</p>
<p>显卡上会有一个内存的容量，称为显存，它的容量影响到屏幕分辨率于色彩深度。而随着3D游戏的流行，显卡运算能力愈发重要，因此显卡会内嵌一个3D加速芯片，这就是所谓的GPU。目前主流的显卡规格是PCI-e，它拥有更快的传输带宽。</p>
<table>
<thead>
<tr>
<th>规格</th>
<th>1x带宽</th>
<th>16x带宽</th>
</tr>
</thead>
<tbody><tr>
<td>PCIe 1.0</td>
<td>250MB/s</td>
<td>4GB/s</td>
</tr>
<tr>
<td>PCIe 2.0</td>
<td>500MB/s</td>
<td>8GB/s</td>
</tr>
<tr>
<td>PCIe 3.0</td>
<td>~1GB/s</td>
<td>~16GB/s</td>
</tr>
<tr>
<td>PCIe 4.0</td>
<td>~2GB/s</td>
<td>~32GB/s</td>
</tr>
</tbody></table>
<h2 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h2><p>硬盘在运行时，主轴马达让盘片转动，然后机械手臂可伸展让磁头在盘片上进行读写。一个硬盘内会有多个盘片。盘片上的数据如下图所示：</p>
<p><img src="http://linux.vbird.org/linux_basic/0105computers/Disktructure.jpg" alt="盘片上的数据格式"></p>
<p>盘片上的每个小区块，称之为<strong>扇区</strong>。同一个同心圆的扇区组合成的圆称为<strong>磁道</strong>。而所有盘片上面的同一个磁道组合成了<strong>柱面</strong>。</p>
<ul>
<li><p>传输接口</p>
<ul>
<li><p>SATA接口</p>
<p>目前SATA已经发展到了第三代，SATA 3.0的理论接口速度可以达到600 MByte/s。</p>
</li>
<li><p>USB接口</p>
<p>如果磁盘是外接式的接口，那么跟主板链接的很可能就是USB接口。目前USB 3.1的理论传输速度可以达到1000 MByte/s，但是实际上并不可能达到。</p>
</li>
</ul>
</li>
<li><p>固态硬盘SSD</p>
<p>传统的硬盘读写数据延迟较高，因此产生了固态硬盘，它没有寻道时间和旋转延迟，可以通过内存直接读写，大大提高了传输效率。</p>
</li>
</ul>
<h2 id="扩展卡与接口"><a href="#扩展卡与接口" class="headerlink" title="扩展卡与接口"></a>扩展卡与接口</h2><p>多信道的卡，例如x8的卡可以安装在少信道的插槽上，如x4的插槽。只是如此这般的话，这张卡的极限性能会下降。</p>
<h2 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h2><ul>
<li><p>发挥扩展卡性能需要考虑插槽的位置</p>
<p>如果我们将卡安装在跟CPU直接相连的那几个插槽上，可以得到最佳性能，但是如果安装在与南桥相连接的插槽上，那么扩展卡的数据要先进入南桥争抢带宽，之后再通过DMI 2.0将数据传给CPU。DMI 2.0的传输速度远远低于PCIe 2.0x8的传输速度，由此导致了性能瓶颈。</p>
</li>
<li><p>CMOS与BIOS</p>
<p>CMOS主要功能为记录主板上面的重要参数，包括系统时间，CPU电压与频率等。</p>
<p>BIOS是主板上的固件，在开机时执行，负责载入CMOS中的参数，并调用储存设备中的开机程序。</p>
</li>
<li><p>连接周边设备的接口</p>
<p><img src="http://linux.vbird.org/linux_basic/0105computers/connect02.jpg" alt="链接周边设备接口"></p>
<ul>
<li>USB接口：USB 3.0为蓝色的插槽颜色。</li>
</ul>
</li>
</ul>
<h1 id="数据表示方式"><a href="#数据表示方式" class="headerlink" title="数据表示方式"></a>数据表示方式</h1><h2 id="数字系统"><a href="#数字系统" class="headerlink" title="数字系统"></a>数字系统</h2><p>二进制是计算机的基础。</p>
<p>二进制与十进制的转换如下：</p>
<p>1101 = 1 * 2^3^ + 1 * 2^2^ + 0 * 2^1^ + 1 * 2^0^</p>
<p>十进制转二进制如下：</p>
<p><img src="http://linux.vbird.org/linux_basic/0105computers/number_01.gif" alt="十进制转二进制方法"></p>
<h2 id="文字编码系统"><a href="#文字编码系统" class="headerlink" title="文字编码系统"></a>文字编码系统</h2><p>计算机上文字的存储采用的文字编码系统的方式来实现的。具体实现如下图所示：</p>
<p><img src="http://linux.vbird.org/linux_basic/0105computers/word_01.gif" alt="文字编码系统"></p>
<p>常用的英文编码表是ASCII编码，在该编码中，每个符号占1 Bytes的记录，故有2^8^ = 256种变化。</p>
<h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><h2 id="机器程序与编译程序"><a href="#机器程序与编译程序" class="headerlink" title="机器程序与编译程序"></a>机器程序与编译程序</h2><p>对于人类而言直接编写机器程序是不现实的，因此产生了高级程序语言。利用高级程序语言编写代码后，交与编译器进行编译后得到机器码，这样简化了写代码的工作。</p>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>OS其实也是一组程序，这组程序的重点在于管理电脑的所有活动以及驱动系统中的所有硬件。但是，要命令OS驱动硬件工作，必须有应用程序的帮助。</p>
<ul>
<li><p>OS核心</p>
<p>OS核心负责管控硬件以及提供合理的电脑系统资源分配。核心程序是参考硬件编写的，故同一个OS程序不能够在不同的硬件架构下运行。当硬件发生变动时，核心程序也要做出调整。并且核心程序是受保护的，不能被用户直接调用。因此，OS提供了系统调用接口，使得用户可以通过该接口调用核心功能，从而编写应用程序来完成复杂的工作。</p>
<p><img src="http://linux.vbird.org/linux_basic/0105computers/os_01.gif" alt="OS的角色"></p>
</li>
<li><p>驱动程序</p>
<p><img src="http://linux.vbird.org/linux_basic/0105computers/computer_driver.png" alt="驱动程序与OS的关系"></p>
<p>OS必须能够驱动硬件，如此应用程序才能够使用该硬件功能。通常OS会提供开发接口，让开发商制作他们的驱动程序。要使用新硬件功能，必须要安装合适的驱动程序。</p>
</li>
</ul>
<h2 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h2><p>应用程序时参考OS提供的开发接口所开发出来的软件，这些软件可以让用户操作，从而达到某些电脑的功能利用。  </p>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><ol>
<li><p>全世界目前跑的最快的计算机（2020年6月23日）</p>
<ul>
<li><p>名称：富岳</p>
</li>
<li><p>系统名称：Red Hat </p>
</li>
<li><p>所在位置：日本</p>
</li>
<li><p>使用的CPU型号与规格：64位处理器A64FX，采用ARM架构</p>
</li>
<li><p>总共使用的CPU数量：15W</p>
</li>
</ul>
</li>
<li><p>Intel i7 4790 CPU的信息</p>
<ul>
<li>与南桥沟通的DMI带宽：5 GT/s</li>
<li>第二层高速缓存容量：8 MB</li>
<li>最大PCIe信道数量：16</li>
<li>主板上面PCIe插槽的数量限制：1x16,2x8,1x8+2x4</li>
</ul>
</li>
<li><p>Intel SSD 520相关信息</p>
<ul>
<li>连接接口：SATA 3.0 6 Gb/s</li>
<li>最大读写速度：读——550 MB/s，写——520 MB/s</li>
<li>最大随机读写数据：读——25000 IOPS，写——40000 IOPS</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>阿飞学Markdown</title>
    <url>/2020/06/13/%E9%98%BF%E9%A3%9E%E5%AD%A6Markdown/</url>
    <content><![CDATA[<h1 id="Markdown是什么"><a href="#Markdown是什么" class="headerlink" title="Markdown是什么"></a>Markdown是什么</h1><p>Markdown就是由一些简单的符号（如***** /-&gt; [] （）#）组成的用于排版的标记语言，其最重要的特点就是可读性强。</p>
<p>Markdown的语法分为，基础语法和扩展语法。在众多的扩展语法中GFM是最流行的，它扩展了包括表格，任务列表，删除线，围栏代码，Emoji等在内的语法。</p>
<a id="more"></a>

<h2 id="Markdown的工作流程"><a href="#Markdown的工作流程" class="headerlink" title="Markdown的工作流程"></a>Markdown的工作流程</h2><p><img src="/images/Image00007.jpg" alt="Markdown工作流程"></p>
<h2 id="Markdown的编辑器"><a href="#Markdown的编辑器" class="headerlink" title="Markdown的编辑器"></a>Markdown的编辑器</h2><p>这里推荐两个流行的Markdown编辑器，分别是Typora和vs Code.下载地址如下:</p>
<p>typora:  <a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a></p>
<p>vs Code: <a href="https://code.visualstudio.com/download" target="_blank" rel="noopener">https://code.visualstudio.com/download</a></p>
<h1 id="Markdown的基础语法"><a href="#Markdown的基础语法" class="headerlink" title="Markdown的基础语法"></a>Markdown的基础语法</h1><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ol>
<li>标题<ul>
<li>语法：<code># + 空格 + 标题内容</code></li>
<li>说明：#的个数表示了标题的等级，建议在#后加一个空格</li>
</ul>
</li>
<li>粗体<ul>
<li>语法：<code>**+加粗内容+**</code></li>
<li>说明：在*的后面不带有空格</li>
</ul>
</li>
<li>斜体<ul>
<li>语法：<code>*+斜体内容+*</code></li>
<li>说明：在*的后面不带有空格</li>
</ul>
</li>
</ol>
<h2 id="段落与换行"><a href="#段落与换行" class="headerlink" title="段落与换行"></a>段落与换行</h2><ol>
<li><p>列表</p>
<ul>
<li>有序列表<ul>
<li>语法：<code>数字序号 + . + 空格 + 列表内容</code></li>
</ul>
</li>
<li>无须列表<ul>
<li>语法：<code>* + 空格 + 列表内容</code></li>
</ul>
</li>
<li>说明：列表可相互嵌套，有序列表和无序列表之间也可以相互嵌套。（<em>建议在列表前/后都空1行</em>）</li>
</ul>
</li>
<li><p>分割线</p>
<ul>
<li>语法：<code>---</code></li>
<li>说明：至少要有三个以上的 - 来标记</li>
</ul>
</li>
<li><p>图片</p>
<ul>
<li>语法：<code>![图片替代文字](图片地址)</code></li>
<li>说明：图片地址可以是本地图片(<a href="[http://www.theoak.online/2020/03/13/hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA/](http://www.theoak.online/2020/03/13/hexo本地图片不显示/)">关于hexo引用本地图片无法显示</a>)的路径或是网络图片的地址；支持绝对路径和相对路径两种方式.</li>
</ul>
</li>
<li><p>链接</p>
<ul>
<li><p>文字链接</p>
<ul>
<li>语法：<code>[链接文字]（链接地址）</code></li>
<li>说明：在扩展语法GFM中，可以只输入url，也能被自动识别为网络链接</li>
</ul>
</li>
<li><p>引用链接</p>
<ul>
<li><p>语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">链接文字</span>][<span class="symbol">链接标记</span>]</span><br><span class="line">[<span class="symbol">链接标记</span>]:<span class="link">链接地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>说明：链接地址为网络地址时要以http开头，否则会被识别为本地地址</p>
</li>
</ul>
</li>
<li><p>网址链接</p>
<ul>
<li>语法：<code>&lt;url&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>代码块</p>
<ul>
<li><p>行内代码</p>
</li>
<li><p>语法：&#39;代码&#39;</p>
</li>
<li><p>代码块</p>
<ul>
<li><p>语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">···语言</span><br><span class="line">代码</span><br><span class="line">···</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>引用</p>
<ul>
<li>语法：<code>&gt;+应用内容</code></li>
<li>说明：引用可以嵌套；建议在&gt;之后加一个空格；不要在引用中添加空行</li>
</ul>
</li>
</ol>
<h1 id="Markdown的扩展语法"><a href="#Markdown的扩展语法" class="headerlink" title="Markdown的扩展语法"></a>Markdown的扩展语法</h1><ol>
<li><p>删除线</p>
<ul>
<li>语法：<code>~~被删除的文字~~</code></li>
</ul>
</li>
<li><p>Emoji表情</p>
<ul>
<li>语法：<code>:表情代码:</code></li>
</ul>
</li>
<li><p>表格</p>
<ul>
<li><p>语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">|表头1|表头2|表头3|</span><br><span class="line">|----|----|----|</span><br><span class="line">|内容1|内容2|内容3|</span><br></pre></td></tr></table></figure>
</li>
<li><p>说明：块级元素不能插入表格中</p>
</li>
</ul>
</li>
<li><p>任务列表</p>
<ul>
<li>语法：<code>- + 空格 + [ + 空格/x + ] 任务内容</code></li>
</ul>
</li>
<li><p>锚点（书签）</p>
<ul>
<li>语法：<code>[锚点描述](#锚点名)</code> </li>
</ul>
</li>
<li><p>上标和下标</p>
<ul>
<li>语法：<code>~下标内容~</code>      <code>^上标内容^</code></li>
</ul>
</li>
<li><p>注释</p>
<ul>
<li>语法：<code>&lt;!--注释内容--&gt;</code></li>
</ul>
</li>
<li><p>脚注</p>
<ul>
<li><p>语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">欲添加脚注的内容[^脚注]</span><br><span class="line">[<span class="symbol">^脚注</span>]:<span class="link">这段文字是对脚注的描述</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
